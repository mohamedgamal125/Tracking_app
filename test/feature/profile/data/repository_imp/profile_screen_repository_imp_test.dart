// import 'dart:io';
//
// import 'package:flutter_test/flutter_test.dart';
// import 'package:mockito/mockito.dart';
//
// import 'package:tracking_app/core/common/result.dart';
// import 'package:tracking_app/feature/profile/data/data_source/profile_local_data_source.dart';
// import 'package:tracking_app/feature/profile/data/data_source/profile_remote_data_source.dart';
// import 'package:tracking_app/feature/profile/data/model/change_password_request_model.dart';
// import 'package:tracking_app/feature/profile/data/model/profile_response_dto.dart';
// import 'package:tracking_app/feature/profile/data/repository_imp/profile_screen_repository_imp.dart';
// import 'package:tracking_app/feature/profile/domain/entity/change_password_entity.dart';
// import 'package:tracking_app/feature/profile/domain/entity/profile_response_entity.dart';
//
// // Mocks generated by Mockito; you should generate these via build_runner or define manually
// class MockProfileRemoteDataSource extends Mock implements ProfileRemoteDataSource {}
//
// class MockProfileLocalDataSource extends Mock implements ProfileLocalDataSource {}
//
// void main() {
//   late MockProfileRemoteDataSource mockRemoteDataSource;
//   late MockProfileLocalDataSource mockLocalDataSource;
//   late ProfileRepositoryImpl repository;
//
//   setUp(() {
//     mockRemoteDataSource = MockProfileRemoteDataSource();
//     mockLocalDataSource = MockProfileLocalDataSource();
//     repository = ProfileRepositoryImpl(mockRemoteDataSource, mockLocalDataSource);
//   });
//
//   group('getProfileData', () {
//     test('should return Success with ProfileResponseEntity when remote call succeeds', () async {
//       final dto = ProfileResponseDTO(/* fill with test data */);
//       final entity = dto.toEntity();
//
//       // Stub remote data source
//       when(mockRemoteDataSource.getProfileData()).thenAnswer((_) async => dto);
//
//       // Call repository method
//       final result = await repository.getProfileData();
//
//       // Verify and assert
//       expect(result, isA<Success<ProfileResponseEntity>>());
//       expect((result as Success).data, equals(entity));
//       verify(mockRemoteDataSource.getProfileData()).called(1);
//     });
//
//     test('should return Error when remote call throws exception', () async {
//       when(mockRemoteDataSource.getProfileData()).thenThrow(Exception('Failed'));
//
//       final result = await repository.getProfileData();
//
//       expect(result, isA<Error>());
//       verify(mockRemoteDataSource.getProfileData()).called(1);
//     });
//   });
//
//   group('editProfile', () {
//     final data = {'firstName': 'John'};
//     final dto = ProfileResponseDTO(/* fill with test data */);
//     final entity = dto.toEntity();
//
//     test('should return Success with ProfileResponseEntity when remote call succeeds', () async {
//       when(mockRemoteDataSource.editProfile(data)).thenAnswer((_) async => dto);
//
//       final result = await repository.editProfile(data);
//
//       expect(result, isA<Success<ProfileResponseEntity>>());
//       expect((result as Success).data, equals(entity));
//       verify(mockRemoteDataSource.editProfile(data)).called(1);
//     });
//
//     test('should return Error when remote call throws exception', () async {
//       when(mockRemoteDataSource.editProfile(data)).thenThrow(Exception('Failed'));
//
//       final result = await repository.editProfile(data);
//
//       expect(result, isA<Error>());
//       verify(mockRemoteDataSource.editProfile(data)).called(1);
//     });
//   });
//
//   group('changePassword', () {
//     final requestModel = ChangePasswordRequestModel(oldPassword: 'Faten505#', newPassword: 'Faten505##'/* fill params */);
//     final changePasswordEntity = ChangePasswordEntity(/* fill params */);
//
//     test('should return Success when change password succeeds', () async {
//       when(mockRemoteDataSource.changePassword(requestModel))
//           .thenAnswer((_) async => Success(changePasswordEntity));
//
//       final result = await repository.changePassword(requestModel);
//
//       expect(result, isA<Success<ChangePasswordEntity>>());
//       expect((result as Success).data, equals(changePasswordEntity));
//       verify(mockRemoteDataSource.changePassword(requestModel)).called(1);
//     });
//
//     test('should return Error when change password fails', () async {
//       when(mockRemoteDataSource.changePassword(requestModel))
//           .thenAnswer((_) async => Error('Error message'));
//
//       final result = await repository.changePassword(requestModel);
//
//       expect(result, isA<Error>());
//       verify(mockRemoteDataSource.changePassword(requestModel)).called(1);
//     });
//   });
//
//   group('logout', () {
//     test('should call remote logout and local deleteToken, return Success', () async {
//       when(mockRemoteDataSource.logout()).thenAnswer((_) async => Future.value());
//       when(mockLocalDataSource.deleteToken()).thenAnswer((_) async => Future.value());
//
//       final result = await repository.logout();
//
//       expect(result, isA<Success<void>>());
//       verify(mockRemoteDataSource.logout()).called(1);
//       verify(mockLocalDataSource.deleteToken()).called(1);
//     });
//
//     test('should return Error if remote logout throws', () async {
//       when(mockRemoteDataSource.logout()).thenThrow(Exception('Logout failed'));
//
//       final result = await repository.logout();
//
//       expect(result, isA<Error>());
//       verify(mockRemoteDataSource.logout()).called(1);
//       verifyNever(mockLocalDataSource.deleteToken());
//     });
//   });
//
//   group('getToken', () {
//     test('should return token from local data source', () async {
//       when(mockLocalDataSource.getToken()).thenAnswer((_) async => 'token123');
//
//       final token = await repository.getToken();
//
//       expect(token, 'token123');
//       verify(mockLocalDataSource.getToken()).called(1);
//     });
//   });
//
//   group('deleteToken', () {
//     test('should call deleteToken on local data source', () async {
//       when(mockLocalDataSource.deleteToken()).thenAnswer((_) async => Future.value());
//
//       await repository.deleteToken();
//
//       verify(mockLocalDataSource.deleteToken()).called(1);
//     });
//   });
//
//   group('uploadPhoto', () {
//     final testFile = File('test/photo.png');
//
//     test('should return Success with URL string when upload succeeds', () async {
//       const uploadedUrl = 'https://example.com/photo.png';
//       when(mockRemoteDataSource.uploadPhoto(testFile))
//           .thenAnswer((_) async => Success<String?>(uploadedUrl));
//
//       final result = await repository.uploadPhoto(testFile);
//
//       expect(result, isA<Success<String?>>());
//       expect((result as Success).data, uploadedUrl);
//       verify(mockRemoteDataSource.uploadPhoto(testFile)).called(1);
//     });
//
//     test('should return Error when upload fails', () async {
//       when(mockRemoteDataSource.uploadPhoto(testFile))
//           .thenAnswer((_) async => Error<String?>('Upload failed'));
//
//       final result = await repository.uploadPhoto(testFile);
//
//       expect(result, isA<Error<String?>>());
//       expect((result as Error).exception, 'Upload failed');
//       verify(mockRemoteDataSource.uploadPhoto(testFile)).called(1);
//     });
//   });
// }
